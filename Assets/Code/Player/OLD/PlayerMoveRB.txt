using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Mirror;

public class PlayerMoveRB : NetworkBehaviour
{
    [Header("Movement Variables")]
    public LayerMask groundMask;
    public float gravitY = -9.8f;
    public float groundDistance;
    public float coyotTime = 0.1f;

    public float maxTermnalVelocity = 100;
    public float maxCrouchTermnalVelocity = 150;




    [Header("Movement Internals")]
    [HideInInspector] public Vector2 move;
    private float timeSinceGrounded;
    //public bool onSlope;

    private PhysicMaterial floorPhysicMat;
    [HideInInspector] public Vector3 floorNormal = Vector3.up;


    [Header("Refrences")]
    public Transform groundCheck;

    private Player player;
    private PlayerCamera playerCamera;
    private Rigidbody rb;
    private Camera cam;

    [HideInInspector] public Controls controls;

    public override void OnStartLocalPlayer() //just for the local client
    {

        controls = new Controls();

        controls.Play.Move.performed += ctx => move = ctx.ReadValue<Vector2>();
        controls.Play.Move.canceled += ctx => move = Vector2.zero;

        controls.Play.Jump.performed += funny => Jump();
        controls.Play.Crouch.performed += funnyer => Crouch();


        controls.Enable();

        enabled = true;
    }

    void Start()
    {
        player = GetComponent<Player>();
        rb = GetComponent<Rigidbody>();
        playerCamera = GetComponentInChildren<PlayerCamera>();
    }

    void Update()
    {
        SetGravity();
        ApplyMovement();
    }


    void ApplyMovement()
    {
        //velocity.y = 0; //dont use fall in calculations (GUYYYYYSSSS)

        move = move.normalized;
        float x = move.x;
        float z = move.y;


        Vector3 movement = transform.right * x + transform.forward * z;

        if (player.crouching)
            movement *= player.crouchSpeed;
        else
            movement *= player.speed;


        rb.AddForce(movement, ForceMode.Acceleration);

    }

    public Vector3 GetForwardTangent(Vector3 moveDir, Vector3 up) //thanks stranger after hours and days i finnally got it
    {
        //return Vector3.Cross(Vector3.Cross(up,moveDir),up);
        Vector3 right = Vector3.Cross(up, moveDir);
        Vector3 forward = Vector3.Cross(right, up);
        return forward;
    }

    void SetGravity()
    {
        //!!!!!!!!!!!!!!!!!!!!WATCH OUT FOR THE (((!)))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        if (Physics.CheckSphere(groundCheck.position, groundDistance, groundMask, QueryTriggerInteraction.Ignore))
        {
            if (timeSinceGrounded < 0)
                timeSinceGrounded = 0;

            timeSinceGrounded += Time.deltaTime;

            //if (rb.velocity.y < 0) //if falling
                //rb.velocity = new Vector3(rb.velocity.x, -2, rb.velocity.z); //if grounded then no need to fall

            //rb.AddForce(0,gravitY,0,ForceMode.Acceleration); //two deltra time cause PHJYSCIS

        }
        else
        {
            if (timeSinceGrounded > 0)
                timeSinceGrounded = 0;

            timeSinceGrounded -= Time.deltaTime; //-= Time.deltaTime * 3; cant spam jump

            rb.AddForce(0, gravitY, 0, ForceMode.Acceleration); //two deltra time cause PHJYSCIS

        }
    }

    void Jump()
    {
        if (timeSinceGrounded > -coyotTime)
        {
            //jumpDelay = coyotTime;
            float jumpForce = Mathf.Sqrt(player.jumpHeight * -2.0f * gravitY);
            Vector3 jumpVelocity = floorNormal * jumpForce;
            jumpVelocity.x += rb.velocity.x;
            jumpVelocity.z += rb.velocity.z;
            rb.velocity = jumpVelocity;
            timeSinceGrounded = coyotTime; //stop double jumpers
        }
    }

    public void Crouch()
    {
        playerCamera.Crouch(!player.crouching);
        player.CmdCrouch();
    }


    [ClientCallback]
    private void OnControllerColliderHit(ControllerColliderHit hit)
    {
        floorPhysicMat = hit.collider.material;

        floorNormal = hit.normal;

        float maxSlope = 95f;

        if (floorNormal.x > maxSlope || floorNormal.x < -maxSlope)
            floorNormal.x = 0;
        if (floorNormal.z > maxSlope || floorNormal.z < -maxSlope)
            floorNormal.z = 0;

        //if (Physics.CheckSphere(groundCheck.position, groundDistance))
        //onSlope = (Vector3.Angle(Vector3.up, floorNormal) > character.slopeLimit);
        //else
        //onSlope = true;


        Rigidbody body = hit.collider.attachedRigidbody;
        Vector3 pushDir;

        //only for useable rigidbodys
        if (body == null)
            return;

        //dont push objects below
        if (hit.moveDirection.y < -0.3)
            return;
        else
        {
            pushDir = (hit.moveDirection);
        }

        // Apply the push
        body.velocity = pushDir * 5;
    }


    private void OnDrawGizmos()
    {
        Gizmos.color = new Color(1, 0, 0, 0.4f);

        Gizmos.DrawSphere(groundCheck.position, groundDistance);
    }
}
