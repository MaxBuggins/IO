using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using SplineMesh;
using Mirror;


[ExecuteInEditMode]
[RequireComponent(typeof(Spline))]
public class NetworkFollowSpline : MonoBehaviour
{
    public bool allowGenertation = true;

    public GameObject Follower;

    public bool reverse = false;
    public float DurationInSecond;
    public float startOffset = 0;

    private float rate = 0;
    private float rateOffset = 0;
    public Spline spline;

    public GameObject generated;

    private void OnEnable()
    {
        rate = 0;

        if (allowGenertation)
        {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : Instantiate(Follower, gameObject.transform);
            generated.name = generatedName;
        }

        spline = GetComponent<Spline>();

#if UNITY_EDITOR
        //EditorApplication.update += Update;
#endif
    }

    void OnDisable()
    {
#if UNITY_EDITOR
        //EditorApplication.update -= Update;
#endif
    }

    void Update()
    {
        //it will crash if 0
        if (DurationInSecond == 0)
            return;

        if (DurationInSecond < 0)
        {
            //having an rate offset variable to stay in range is a little silly, but it works fine
            rate = ((float)(-NetworkTime.time + startOffset) / Mathf.Abs(DurationInSecond)) + rateOffset;

            int temp = 0;
            while (rate < 0 && temp < 100)
            {
                rateOffset += spline.nodes.Count - 1;
                rate += spline.nodes.Count - 1; //to fix this update only
                temp += 1;             
            }
        }

        else
        {
            //having an rate offset variable to stay in range is a little silly, but it works fine
            rate = ((float)(NetworkTime.time + startOffset) / DurationInSecond) + rateOffset;

            while (rate > spline.nodes.Count - 1)
            {
                rateOffset -= spline.nodes.Count - 1;
                rate -= spline.nodes.Count - 1; //to fix this update only
            }
        }

        PlaceFollower();
    }


    private void PlaceFollower()
    {
        if (generated != null)
        {
            CurveSample sample = spline.GetSample(rate);
            generated.transform.localPosition = sample.location;
            generated.transform.localRotation = sample.Rotation;
        }
    }
}


